#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Video2Note - –ë—ã—Å—Ç—Ä–∞—è –∏ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–∞—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è —á–µ—Ä–µ–∑ whisper.cpp
–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ —Ç–æ—á–Ω–æ—Å—Ç–∏ –Ω–∞ macOS.
"""

import logging
import os
import sys
from pathlib import Path
from typing import Iterable, Optional

import click
from rich.markup import escape
from rich.panel import Panel

from video2note.config import (ALL_SUPPORTED_FORMATS, TEMP_DIR_NAME,
                               TRANSCRIPTS_DIR_NAME, TranscriptionConfig)
from video2note.core import run_pipeline
from video2note.exceptions import Video2NoteError
from video2note.ui import console, open_file_dialog, rich_handler
from video2note.utils import get_safe_filename, is_nonempty_text_file

# --- Logging Configuration ---
# Set up a logger for the application.
# By default, the handler only shows warnings and above.
# The logger itself is set to DEBUG to capture all levels.
logger = logging.getLogger("video2note")
logger.setLevel(logging.DEBUG)  # Capture all messages
rich_handler.setLevel(logging.WARNING)  # Default console output level
logger.addHandler(rich_handler)


# --- UI Layer ---

def show_intro(files: list[Path], config: TranscriptionConfig):
    """Displays the initial configuration panel."""
    file_list = "\n".join(f"- [green]{f.name}[/green]" for f in files)
    panel_content = (
        f"üìÑ [bold]–§–∞–π–ª—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏:[/bold]\n{file_list}\n"
        f"üéØ [bold]–ú–æ–¥–µ–ª—å:[/bold] [cyan]{config.model_path.name}[/cyan]\n"
        f"üó£Ô∏è  [bold]–Ø–∑—ã–∫:[/bold] [cyan]{config.language}[/cyan]  "
        f"[bold]–ü–æ—Ç–æ–∫–∏:[/bold] [cyan]{config.threads}[/cyan]"
    )
    console.print(Panel(panel_content, title="üíø –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è", border_style="green"))


def show_summary(result):
    """Displays a summary panel for a single transcription result."""
    console.print(f"\n‚úÖ [bold]–ì–æ—Ç–æ–≤–æ:[/bold] [link=file://{result.output_file.resolve()}]{result.output_file}[/link]")
    preview = result.transcription[:300] + "..." if len(result.transcription) > 300 else result.transcription
    console.print("\nüìù [bold]–ü—Ä–µ–≤—å—é:[/bold]")
    console.print(f"[italic dim]{escape(preview)}[/italic dim]")


# --- Main CLI Interface ---

@click.command(context_settings=dict(help_option_names=['-h', '--help']))
@click.argument('input_files', type=click.Path(exists=True, path_type=Path), required=False, nargs=-1)
@click.option('-o', '--output', type=click.Path(path_type=Path), help='–ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ (–¥–ª—è –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞).')
@click.option('-m', '--model', default='large-v3', show_default=True, type=click.Choice(['tiny', 'base', 'small', 'medium', 'large-v2', 'large-v3']), help='–ú–æ–¥–µ–ª—å whisper.cpp.')
@click.option('-l', '--language', default='ru', show_default=True, help='–Ø–∑—ã–∫ –∞—É–¥–∏–æ (ru, en, etc.).')
@click.option('--threads', default=os.cpu_count() or 4, show_default=True, type=int, help='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤ CPU.')
@click.option('--delete-temp/--keep-temp', 'delete_temp', default=True, show_default=True, help='–£–¥–∞–ª—è—Ç—å –∏–ª–∏ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∞—É–¥–∏–æ—Ñ–∞–π–ª.')
@click.option('--overwrite/--no-overwrite', 'overwrite', default=False, show_default=True, help='–ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏.')
@click.option('-v', '--verbose', is_flag=True, help='–ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏.')
def main(input_files: Iterable[Path], output: Optional[Path], model: str, language: str, threads: int, delete_temp: bool, overwrite: bool, verbose: bool):
    """–ë—ã—Å—Ç—Ä–∞—è –∏ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–∞—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –∞—É–¥–∏–æ/–≤–∏–¥–µ–æ —Ñ–∞–π–ª–æ–≤ —á–µ—Ä–µ–∑ whisper.cpp."""
    if verbose:
        # If verbose mode is on, show all logs from DEBUG level
        rich_handler.setLevel(logging.DEBUG)
    
    console.rule("[bold green]üöÄ Video2Note (whisper.cpp)[/bold green]")

    try:
        files_to_process = list(input_files)
        if not files_to_process:
            chosen_files = open_file_dialog()
            if not chosen_files:
                console.print("‚ùå –§–∞–π–ª—ã –Ω–µ –≤—ã–±—Ä–∞–Ω—ã."); return
            files_to_process = chosen_files

        if output and len(files_to_process) > 1:
            console.print("[yellow]–û–ø—Ü–∏—è --output/-o –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –∏ –±—É–¥–µ—Ç –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∞.[/yellow]")
            output = None
            
        for file in files_to_process:
            if file.suffix.lower() not in ALL_SUPPORTED_FORMATS:
                console.print(f"‚ùå [bold red]–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç:[/bold red] {file.name} - —Ñ–∞–π–ª –ø—Ä–æ–ø—É—â–µ–Ω.")
                continue

        config = TranscriptionConfig(model_name=model, language=language, threads=threads)
        show_intro(files_to_process, config)

        script_dir = Path(__file__).parent.resolve()
        temp_dir = script_dir / TEMP_DIR_NAME
        output_dir = script_dir / TRANSCRIPTS_DIR_NAME
        temp_dir.mkdir(exist_ok=True)
        output_dir.mkdir(exist_ok=True)
        
        for input_file in files_to_process:
            console.rule(f"[bold blue]–û–±—Ä–∞–±–æ—Ç–∫–∞: {input_file.name}[/bold blue]")
            output_path = output if output else output_dir / f"{get_safe_filename(input_file.stem)}.txt"

            # Skip if transcript exists and overwrite disabled
            if not overwrite and is_nonempty_text_file(output_path):
                console.print(f"[yellow]–ü—Ä–æ–ø—É—Å–∫:[/yellow] —É–∂–µ –µ—Å—Ç—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è ‚Üí {output_path.name}")
                continue
            
            try:
                result = run_pipeline(input_file, config, temp_dir, output_path, delete_temp)
                show_summary(result)
            except Video2NoteError as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–∞–π–ª {input_file.name}: {e}", exc_info=verbose)
                console.print(f"‚ùå [bold red]–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {input_file.name}:[/bold red] {escape(str(e))}")

        # --- Final Cleanup ---
        if delete_temp:
            try:
                if temp_dir.is_dir() and not any(temp_dir.iterdir()):
                    logger.info(f"–£–¥–∞–ª—è—é –ø—É—Å—Ç—É—é –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é: {temp_dir.name}")
                    temp_dir.rmdir()
                    console.print(f"üßπ –í—Ä–µ–º–µ–Ω–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {temp_dir.name} —É–¥–∞–ª–µ–Ω–∞.")
            except OSError as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é {temp_dir.name}: {e}")

    except Video2NoteError as e:
        logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=verbose)
        console.print(f"‚ùå [bold red]–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:[/bold red] {escape(str(e))}")
        sys.exit(1)
    except Exception as e:
        logger.critical(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)
        console.print(f"‚ùå [bold red]–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:[/bold red] {escape(str(e))}")
        sys.exit(1)

    console.rule("[bold green]‚úÖ –í—Å–µ –∑–∞–¥–∞—á–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã[/bold green]")


if __name__ == '__main__':
    main() 